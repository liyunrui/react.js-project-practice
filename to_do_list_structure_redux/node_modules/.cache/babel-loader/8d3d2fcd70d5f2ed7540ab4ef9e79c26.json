{"ast":null,"code":"import { createContext, useContext, useMemo, useReducer, useRef, useEffect } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n} // Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n// From https://github.com/reduxjs/react-redux/blob/3e53ff96ed10f71c21346f08823e503df724db35/src/utils/shallowEqual.js\n\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // tslint:disable-next-line:prefer-for-of\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n} // Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n\n\nvar MissingProviderError =\n/** @class */\nfunction (_super) {\n  __extends(MissingProviderError, _super);\n\n  function MissingProviderError() {\n    return _super.call(this, 'redux-react-hook requires your Redux store to be passed through ' + 'context via the <StoreContext.Provider>') || this;\n  }\n\n  return MissingProviderError;\n}(Error);\n\nfunction memoizeSingleArg(fn) {\n  var value;\n  var prevArg;\n  return function (arg) {\n    if (prevArg !== arg) {\n      prevArg = arg;\n      value = fn(arg);\n    }\n\n    return value;\n  };\n}\n/**\r\n * To use redux-react-hook with stronger type safety, or to use with multiple\r\n * stores in the same app, create() your own instance and re-export the returned\r\n * functions.\r\n */\n\n\nfunction create() {\n  var StoreContext = createContext(null);\n  /**\r\n   * Your passed in mapState function should be memoized with useCallback to avoid\r\n   * resubscribing every render. If you don't use other props in mapState, pass\r\n   * an empty array [] as the dependency list so the callback isn't recreated\r\n   * every render.\r\n   *\r\n   * const todo = useMappedState(useCallback(\r\n   *   state => state.todos.get(id),\r\n   *   [id],\r\n   * ));\r\n   */\n\n  function useMappedState(mapState) {\n    var store = useContext(StoreContext);\n\n    if (!store) {\n      throw new MissingProviderError();\n    } // We don't keep the derived state but call mapState on every render with current state.\n    // This approach guarantees that useMappedState returns up-to-date derived state.\n    // Since mapState can be expensive and must be a pure function of state we memoize it.\n\n\n    var memoizedMapState = useMemo(function () {\n      return memoizeSingleArg(mapState);\n    }, [mapState]);\n    var state = store.getState();\n    var derivedState = memoizedMapState(state); // Since we don't keep the derived state we still need to trigger\n    // an update when derived state changes.\n\n    var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n        forceUpdate = _a[1]; // Keep previously commited derived state in a ref. Compare it to the new\n    // one when an action is dispatched and call forceUpdate if they are different.\n\n\n    var lastStateRef = useRef(derivedState);\n    var memoizedMapStateRef = useRef(memoizedMapState);\n    useEffect(function () {\n      lastStateRef.current = derivedState;\n      memoizedMapStateRef.current = memoizedMapState;\n    });\n    useEffect(function () {\n      var didUnsubscribe = false; // Run the mapState callback and if the result has changed, make the\n      // component re-render with the new state.\n\n      var checkForUpdates = function () {\n        if (didUnsubscribe) {\n          // Don't run stale listeners.\n          // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n          return;\n        }\n\n        var newDerivedState = memoizedMapStateRef.current(store.getState());\n\n        if (!shallowEqual(newDerivedState, lastStateRef.current)) {\n          // In TS definitions userReducer's dispatch requires an argument\n          forceUpdate();\n        }\n      }; // Pull data from the store after first render in case the store has\n      // changed since we began.\n\n\n      checkForUpdates(); // Subscribe to the store to be notified of subsequent changes.\n\n      var unsubscribe = store.subscribe(checkForUpdates); // The return value of useEffect will be called when unmounting, so\n      // we use it to unsubscribe from the store.\n\n      return function () {\n        didUnsubscribe = true;\n        unsubscribe();\n      };\n    }, [store]);\n    return derivedState;\n  }\n\n  function useDispatch() {\n    var store = useContext(StoreContext);\n\n    if (!store) {\n      throw new MissingProviderError();\n    }\n\n    return store.dispatch;\n  }\n\n  return {\n    StoreContext: StoreContext,\n    useDispatch: useDispatch,\n    useMappedState: useMappedState\n  };\n} // Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n\n\nvar _a;\n\nvar StoreContext = (_a = create(), _a.StoreContext),\n    useDispatch = _a.useDispatch,\n    useMappedState = _a.useMappedState;\nexport { StoreContext, useDispatch, useMappedState, create };","map":null,"metadata":{},"sourceType":"module"}